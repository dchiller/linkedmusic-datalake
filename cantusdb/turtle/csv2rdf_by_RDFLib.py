from rdflib import Graph, URIRef, Literal
from rdflib.namespace import RDF
import csv
import validators
import sys

# helper to get the predicate relation dictionary
def get_ontology_dict () :
    
    # a specific config file for the predicates
    # TODO: maybe change this part to make a more customized way of getting the predicates configurations
    ontology_f = open("ontology_dict.csv", 'r')
    ontology_reader = csv.DictReader(ontology_f)
    ontology_dict = {}
    
    # converting the reader dict to the predicate dictionary
    for row in ontology_reader:
        ontology_dict[row[list(row.keys())[0]]] = row[list(row.keys())[1]]
                
    return ontology_dict
    
# a main operation function
def convert_csv_to_turtle():
    # TODO: maybe change this one to accomadate for multiple files
    if len(sys.argv) != 2:
        raise ValueError("Invalid number of input filename") 
    
    g = Graph()

    csv_file = open(sys.argv[1], 'r', encoding='utf-8')
    
    csv_reader = csv.DictReader(csv_file)
    ontology_dict = get_ontology_dict()

    # Convert each row to Turtle format and add it to the output
    for row in csv_reader:
        # the first column as the subject
        absolute_uri = URIRef(row[list(row.keys())[0]])
        g.add((absolute_uri, RDF.type, URIRef("http://www.wikidata.org/prop/direct/chant")))
        
        # extracting other informations
        for k in row:
            # if this key is the first column, skip
            if k.__eq__(list(row.keys())[0]):
                continue
            
            # finding the predicate from csv in the config dictionary, if not exit, skip
            if k in list(ontology_dict.keys()):
                predicate = URIRef(ontology_dict[k])
            else:
                continue
            
            # the object might be an URI or a literal
            if validators.url(row[k]):
                obj = URIRef(row[k])
            else:
                obj = Literal(row[k])
            
            # add this triple (absolute uri, predicate, object) to the graph
            g.add((absolute_uri, predicate, obj))    
        
    csv_file.close()
    
    return g

# openrefine_csv_test.csv
# is generated by openrefine and used for testing
# Convert the CSV data to Turtle format
if __name__ == "__main__" :
    turtle_data = convert_csv_to_turtle()
    turtle_data.serialize(format="turtle", destination="test.ttl")